#!/usr/bin/env bash
#
# Move a path to the shell-friendly equivalent.
#

usage() {
    cat <<EOF
Usage: ${0##*/} [options]
Move a path to the shell-friendly equivalent

  Options:
    -d          don't be recursive (i.e. only change file, not its directory)
    -n          dry run - perform a trial run with no changes made
    -s          ezpath-ise a string (don't do any moving of files)
    -v          be verbose (use mv -v option)
    -h          display this help message
EOF
}

get_shell_friendly() {
    local shell_friendly=$(echo "$1" | \
                   sed -e "s/ - /-/g"         \
                       -e "s/ /-/g"           \
                       -e "s/\(.*\)/\L\1/g"   \
                       -e "s/[\.;':,()!?]//g" \
                       -e "s/--/-/g"          \
                       -e "s/&/and/g")
    #               1. replace " - " with "-" (so no "---" in paths)
    #               2. replace spaces with hyphen
    #               3. to lower
    #               4. remove almost all punctuation
    #               5. replace "--" with "-" (can I make superfluous if I redorer?)
    echo "$shell_friendly"
}

get_shell_friendly_ext() {
    # we don't want to mess up extensions, so only make them lower
    local shell_friendly=$(echo "$1" | \
                   sed -e "s/\(.*\)/\L\1/g")
#                   3. to lower
    echo "$shell_friendly"
}

while getopts "dnsvh" opt; do
    case $opt in
        o) # -don't- be recursive 
            is_single=1
            ;;
        n) # dry run, make no changes
            is_dryrun=1
            ;;
        s) # operate on string
            is_string=1
            ;;
        v) # be verbose
            yn_verbose="-v"
            ;;
        h) # display help
            usage
            exit 0
    esac
done

# shift positional parameters, having found options
shift $((OPTIND-1))

# quick & simple in the case of a string
if [ $is_string ]; then
    shell_friendly=$(get_shell_friendly "$1")
    if [ "$1" == "$shell_friendly" ]; then
        echo "${0##*/}: that path is already shell-friendly!"
        exit 0
    fi
    echo "$shell_friendly"
    exit 0
fi



if [ -z "$1" ]; then
    echo "${0##*/}: error: no argument given"
    exit 1
fi

if [ ! -e "$1" ]; then
    echo "${0##*/}: error: file does not exist"
    exit 2
fi



# full path
orig_path=$(readlink -f "$1")

# just the filename
orig_file=$(basename "$1")

# choose which one to use depending on options
if [ $is_single ]; then
    working_path="$orig_file"
else
    # prepend working directory if we're renaming the whole path
    working_path="$orig_path"
fi

# if we get a file, remove extension to append later
if [ -f "$orig_path" ]; then
    working_path=${working_path%.*}
    ext=".${orig_file##*.}"
fi

edited_path=$(get_shell_friendly "$working_path")
edited_ext=$(get_shell_friendly_ext "$ext")

# prepend original path if we didn't change it
if [ $is_single ]; then
    edited_path="$(dirname "$orig_path")/$edited_path"
fi
# append extension (for non-files, empty string)
new_path="${edited_path}${edited_ext}"

if [[ "$orig_path" == "$new_path" ]]; then
    echo "${0##*/}: that path is already shell-friendly!"
    exit 0
else
    if [[ $is_dryrun ]]; then
        # TODO: can I make this any neater? all I do is prepend echo, but I
        #       feel that would be dangerous/not 'right'.
        echo "mkdir -p \"$(dirname "$new_path")\""
        echo "mv $yn_verbose \""$orig_path"\" \""$new_path"\""
    else
        mkdir -p "$(dirname "$new_path")"
        # should I use $1, or readlink-ized $orig_path?
        mv $yn_verbose "$1" "$new_path"
    fi
fi
